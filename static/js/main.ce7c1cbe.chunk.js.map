{"version":3,"sources":["app/components/AppHeader.js","app/AppLayout.js","manager/service-worker.js","index.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","padding","h4","fontWeight","link","textDecoration","React","memo","classes","AppBar","position","color","variant","className","Link","href","Typography","RequestLayout","lazy","DonateLayout","MainLayout","DonateToOrgPage","fontFamily","loader","textAlign","height","progress","marginTop","Fragment","Divider","style","width","basename","fallback","Grid","item","xs","CircularProgress","exacts","exact","path","component","props","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ce7c1cbe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Grid, Link, Typography, AppBar } from \"@material-ui/core\";\r\nimport SupervisedUserCircleOutlinedIcon from \"@material-ui/icons/SupervisedUserCircleOutlined\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"#f50057\",\r\n    padding: \"20px 0 20px 10px\",\r\n  },\r\n  h4: {\r\n    fontWeight: \"bold\",\r\n    // fontFamily: \"Overlock SC, cursive\",\r\n    fontWeight: 500,\r\n    marginLeft: 30,\r\n    color: \"white\",\r\n  },\r\n  link: {\r\n    textDecoration: \"none !important\",\r\n  },\r\n}));\r\n\r\nfunction AppHeader() {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar\r\n      position=\"static\"\r\n      color=\"secondary\"\r\n      variant=\"outlined\"\r\n      className={classes.root}\r\n    >\r\n      <Link href=\"/ppe-finder-app\" className={classes.link}>\r\n        <Typography variant=\"h5\" className={classes.h4}>\r\n          D<SupervisedUserCircleOutlinedIcon />\r\n          NATE PPE\r\n        </Typography>\r\n      </Link>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default React.memo(AppHeader);\r\n","import React, { Suspense } from \"react\";\r\nimport { Grid, Divider } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport AppHeader from \"./components/AppHeader\";\r\n\r\nconst RequestLayout = React.lazy(() => import(\"../workflow/request/RequestLayout\"));\r\nconst DonateLayout = React.lazy(() => import(\"../workflow/donate/DonateLayout\"));\r\nconst MainLayout = React.lazy(() => import(\"../workflow/main/MainLayout\"));\r\nconst DonateToOrgPage = React.lazy(() => import(\"../workflow/donate/components/DonateToOrgPage\"));\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    backgroundColor: \"#f50057\"\r\n  },\r\n  h4: {\r\n    fontWeight: \"bold\",\r\n    fontFamily: \"Overlock SC, cursive\",\r\n    padding: 10,\r\n    color: \"white\"\r\n  },\r\n  link: {\r\n    textDecoration: \"none !important\"\r\n  },\r\n  loader: {\r\n    textAlign: \"center\",\r\n    height: \"100%\"\r\n  },\r\n  progress: {\r\n    marginTop: 250\r\n  }\r\n}));\r\n\r\nfunction AppLayout() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppHeader />\r\n      <Divider style={{ width: \"100%\" }} />\r\n      <HashRouter basename=\"/\">\r\n        <Suspense fallback={<Grid item xs={12} className={classes.loader}><CircularProgress color=\"secondary\" className={classes.progress} /></Grid>}>\r\n          <Route\r\n            exacts\r\n            exact\r\n            path=\"/\"\r\n            component={props => <MainLayout {...props} />}\r\n          />\r\n          <Route\r\n            exacts\r\n            exact\r\n            path=\"/request\"\r\n            component={() => <RequestLayout />}\r\n          />\r\n          <Route\r\n            exacts\r\n            exact\r\n            path=\"/donate\"\r\n            component={() => <DonateLayout />}\r\n          />\r\n          <Route\r\n            exacts\r\n            exact\r\n            path=\"/donate/org\"\r\n            component={() => <DonateToOrgPage />}\r\n          />\r\n        </Suspense>\r\n      </HashRouter>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default React.memo(AppLayout);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nexport const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport AppLayout from \"./app/AppLayout\";\r\nimport * as serviceWorker from \"./manager/service-worker\";\r\n\r\nReactDOM.render(<AppLayout />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}